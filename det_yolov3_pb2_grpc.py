# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import common_pb2 as common__pb2
import det_yolov3_pb2 as det__yolov3__pb2


class DetYOLOv3Stub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DetFrame = channel.unary_unary(
                '/det_yolov3.DetYOLOv3/DetFrame',
                request_serializer=common__pb2.DetFrameRequest.SerializeToString,
                response_deserializer=det__yolov3__pb2.Score.FromString,
                )
        self.Detect = channel.unary_unary(
                '/det_yolov3.DetYOLOv3/Detect',
                request_serializer=det__yolov3__pb2.DetectionRequest.SerializeToString,
                response_deserializer=det__yolov3__pb2.DetectionOutput.FromString,
                )


class DetYOLOv3Servicer(object):
    """Missing associated documentation comment in .proto file"""

    def DetFrame(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Detect(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DetYOLOv3Servicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DetFrame': grpc.unary_unary_rpc_method_handler(
                    servicer.DetFrame,
                    request_deserializer=common__pb2.DetFrameRequest.FromString,
                    response_serializer=det__yolov3__pb2.Score.SerializeToString,
            ),
            'Detect': grpc.unary_unary_rpc_method_handler(
                    servicer.Detect,
                    request_deserializer=det__yolov3__pb2.DetectionRequest.FromString,
                    response_serializer=det__yolov3__pb2.DetectionOutput.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'det_yolov3.DetYOLOv3', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DetYOLOv3(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def DetFrame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/det_yolov3.DetYOLOv3/DetFrame',
            common__pb2.DetFrameRequest.SerializeToString,
            det__yolov3__pb2.Score.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Detect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/det_yolov3.DetYOLOv3/Detect',
            det__yolov3__pb2.DetectionRequest.SerializeToString,
            det__yolov3__pb2.DetectionOutput.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
